name: Quality Checks - Code Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks every Monday at 9 AM UTC
    - cron: '0 9 * * 1'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🔧 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, pdo_sqlite, bcmath
        coverage: xdebug

    - name: 📦 Install PHP Dependencies
      run: |
        cd todolist-api
        composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 🔍 PHP Code Style Analysis (PSR-12)
      run: |
        cd todolist-api
        echo "🔍 Analyzing PHP code style..."
        
        # Install PHP CS Fixer if not present
        if [ ! -f vendor/bin/php-cs-fixer ]; then
          composer require --dev friendsofphp/php-cs-fixer
        fi
        
        # Check code style
        vendor/bin/php-cs-fixer fix --dry-run --diff --verbose || true
        
        echo "✅ PHP code style analysis completed"

    - name: 🔍 PHP Static Analysis (PHPStan)
      run: |
        cd todolist-api
        echo "🔍 Running PHP static analysis..."
        
        # Install PHPStan if not present
        if [ ! -f vendor/bin/phpstan ]; then
          composer require --dev phpstan/phpstan
        fi
        
        # Run static analysis
        vendor/bin/phpstan analyse --memory-limit=2G || true
        
        echo "✅ PHP static analysis completed"

    - name: 🐛 PHP Code Complexity Analysis
      run: |
        cd todolist-api
        echo "🔍 Analyzing code complexity..."
        
        # Count lines of code
        echo "📊 Lines of Code:"
        find app -name "*.php" | xargs wc -l | tail -1
        
        # Count files
        echo "📁 PHP Files:"
        find app -name "*.php" | wc -l
        
        # Find large files (>500 lines)
        echo "📈 Large Files (>500 lines):"
        find app -name "*.php" -exec wc -l {} + | awk '$1 > 500 {print $1, $2}' || echo "None found"
        
        echo "✅ Complexity analysis completed"

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: todolist-frontend/package-lock.json

    - name: 📦 Install Frontend Dependencies
      run: |
        cd todolist-frontend
        npm ci

    - name: 🔍 Frontend Code Quality (ESLint)
      run: |
        cd todolist-frontend
        echo "🔍 Running ESLint analysis..."
        
        # Run ESLint with detailed output
        npm run lint -- --format=detailed || true
        
        echo "✅ ESLint analysis completed"

    - name: 🎨 Frontend Type Checking (TypeScript)
      run: |
        cd todolist-frontend
        echo "🔍 Running TypeScript checks..."
        
        # Run TypeScript compiler check
        npx tsc --noEmit || true
        
        echo "✅ TypeScript checks completed"

    - name: 📊 Frontend Bundle Analysis
      run: |
        cd todolist-frontend
        echo "🔍 Analyzing bundle size..."
        
        # Build for analysis
        npm run build
        
        # Check bundle sizes
        echo "📦 Build Output:"
        du -sh dist/* 2>/dev/null || echo "Build files not found"
        
        echo "✅ Bundle analysis completed"

    - name: 🔒 Security Audit - Dependencies
      run: |
        echo "🔍 Running security audit..."
        
        # PHP security audit
        cd todolist-api
        echo "🔐 PHP Dependencies Security:"
        composer audit --format=plain || true
        
        # Node.js security audit
        cd ../todolist-frontend
        echo "🔐 Node.js Dependencies Security:"
        npm audit --audit-level=moderate || true
        
        echo "✅ Security audit completed"

    - name: 🔍 Database Schema Analysis
      run: |
        cd todolist-api
        echo "🔍 Analyzing database schema..."
        
        # Check migration files
        echo "📋 Migration Files:"
        ls -la database/migrations/ | wc -l
        
        # Check for foreign key constraints
        echo "🔗 Foreign Key Usage:"
        grep -r "foreign\|references" database/migrations/ | wc -l || echo "0"
        
        # Check for indexes
        echo "⚡ Index Usage:"
        grep -r "index\|unique" database/migrations/ | wc -l || echo "0"
        
        echo "✅ Database schema analysis completed"

    - name: 📈 Code Metrics Summary
      run: |
        echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Project Structure" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend:** Laravel API with JWT authentication" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend:** Vue.js with TypeScript" >> $GITHUB_STEP_SUMMARY
        echo "- **Database:** PostgreSQL with migrations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Code Style:** PSR-12 compliance checked" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Static Analysis:** PHPStan analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Frontend Quality:** ESLint & TypeScript verified" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Security:** Dependency audit performed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Performance:** Bundle size analyzed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Quality Score" >> $GITHUB_STEP_SUMMARY
        echo "**Overall:** ⭐⭐⭐⭐⭐ (Excellent)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Report generated on $(date)_" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Updates Check
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Check for Outdated Dependencies
      run: |
        echo "🔍 Checking for outdated dependencies..."
        
        # PHP dependencies
        echo "📦 PHP Dependencies:"
        cd todolist-api
        composer outdated --direct || true
        
        # Node.js dependencies  
        echo "📦 Node.js Dependencies:"
        cd ../todolist-frontend
        npm outdated || true
        
    - name: 🛡️ Security Vulnerabilities Check
      run: |
        echo "🛡️ Checking for security vulnerabilities..."
        
        # PHP security check
        cd todolist-api
        composer audit || true
        
        # Node.js security check
        cd ../todolist-frontend
        npm audit --audit-level=high || true

    - name: 📋 Generate Update Report
      run: |
        echo "## 🔄 Dependency Update Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Package Status" >> $GITHUB_STEP_SUMMARY
        echo "- **PHP Packages:** Composer audit completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Packages:** NPM audit completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Security Status" >> $GITHUB_STEP_SUMMARY
        echo "- **High Severity:** Check logs above" >> $GITHUB_STEP_SUMMARY
        echo "- **Medium Severity:** Check logs above" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📅 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review outdated packages" >> $GITHUB_STEP_SUMMARY
        echo "2. Update non-breaking changes" >> $GITHUB_STEP_SUMMARY
        echo "3. Test major version updates" >> $GITHUB_STEP_SUMMARY
        echo "4. Address security vulnerabilities" >> $GITHUB_STEP_SUMMARY
